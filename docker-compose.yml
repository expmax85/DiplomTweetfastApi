version: "3.9"

services:
  web_app:
    container_name: app_main
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      CONFIG_FILE: ".env"
    image: app_main
    entrypoint:
      sh -c "
      alembic upgrade head &&
      gunicorn src.main:app --log-config log.conf -w 4 -k uvicorn.workers.UvicornWorker --bind 0.0.0.0:80 --forwarded-allow-ips='*'
      "
    volumes:
      - .:/code
    ports:
      - "${APP_PORT}:80"
    depends_on:
      web_db:
        condition: service_healthy
      web_redis:
        condition: service_healthy
    networks:
      - web_net
    logging:
      driver: "fluentd"
      options:
        fluentd-address: localhost:24224
        tag: gunicorn.app

  celery:
    build:
      context: .
      dockerfile: Dockerfile_celery
    container_name: main_celery
    command: celery -A src.celery.celery_app worker --loglevel=info
    environment:
      CONFIG_FILE: ".env"
    networks:
      - web_net
    volumes:
      - .:/code
    depends_on:
      - web_app
      - web_rabbitmq
      - web_redis

  web_db:
    container_name: main_pg
    image: postgres:15.1-alpine
    expose:
      - 5432
    ports:
      - "${DB_PORT}:5432"
    volumes:
      - ./data/db:/var/lib/postgresql/data
      - ./init-database.sh:/docker-entrypoint-initdb.d/init-database.sh
    environment:
      CONFIG_FILE: ".env"
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    networks:
      - web_net
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d ${DB_NAME} -U ${DB_USER}"]
      interval: 10s
      timeout: 10s
      retries: 30

  web_redis:
    container_name: main_redis
    image: redis:latest
    entrypoint:
      sh -c "redis-server"
    expose:
      - 6380
    ports:
      - "${REDIS_PORT}:6380"
    environment:
      CONFIG_FILE: ".env"
    networks:
      - web_net
    healthcheck:
        test: [ "CMD", "redis-cli", "ping" ]
        interval: 10s
        timeout: 10s
        retries: 30

  web_rabbitmq:
    container_name: main_rabbitmq
    image: rabbitmq:3.11.8-alpine
    restart: always
    expose:
      - 5672
    ports:
      - "${RABBIT_PORT}:5672"
    environment:
      CONFIG_FILE: ".env"
    networks:
      - web_net
    healthcheck:
        test: rabbitmq-diagnostics -q ping
        interval: 10s
        timeout: 10s
        retries: 30

  flower:
    image: mher/flower:latest
    container_name: main_flower
    environment:
      CELERY_BROKER_URL: amqp://${RABBIT_USER}:${RABBIT_PASSWORD}@${RABBIT_HOST}:${RABBIT_PORT}//
      FLOWER_PORT: ${FLOWER_PORT}
      FLOWER_BASIC_AUTH: "${FLOWER_USER}:${FLOWER_PASSWORD}"
    ports:
      - "${FLOWER_PORT}:5555"
    depends_on:
      - celery
    networks:
      - web_net

  elasticsearch:
    image: elasticsearch:8.0.0
    container_name: efk_elasticsearch
    volumes:
      - type: bind
        source: ./elasticsearch/config/elasticsearch.yml
        target: /usr/share/elasticsearch/config/elasticsearch.yml
        read_only: true
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      ES_JAVA_OPTS: "-Xmx256m -Xms256m"
      ELASTIC_PASSWORD: changeme
      discovery.type: single-node
    networks:
      - web_net

  fluentd:
    build: ./fluentd
    container_name: efk_fluentd
    volumes:
      - ./fluentd/conf:/fluentd/etc
    links:
      - "elasticsearch"
    ports:
      - "24224:24224"
      - "24224:24224/udp"
    depends_on:
      - elasticsearch
      - kibana
    networks:
      - web_net

  kibana:
    image: kibana:8.0.0
    container_name: efk_kibana
    volumes:
      - type: bind
        source: ./kibana/config/kibana.yml
        target: /usr/share/kibana/config/kibana.yml
        read_only: true
    ports:
      - "5601:5601"
    networks:
      - web_net
    depends_on:
      - elasticsearch

networks:
  web_net:
    name: web_net
